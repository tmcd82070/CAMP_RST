xx <- x[ind]
yy <- y[ind]
jitx <- rnorm(sum(ind), sd=60*60*3)
#jity <- rnorm(sum(ind), sd=diff(range(y))/100)
jity <- 0
validv <- ifelse(valid[ind]==1,'Fishing','NotFishing')
points( xx + jitx, yy + jity, col=mycol[ which(l.s == life.stages)], pch=mypch[ which(l.s == life.stages)] )
ans.pts <- rbind( ans.pts, data.frame(lifestage=l.s, date=xx, fork.length.mm=yy, date.jittered=xx+jitx, fork.length.mm.jittered=yy+jity, fishing.status=validv ))
}
ans.pts <- ans.pts[order(ans.pts$date, ans.pts$lifestage, ans.pts$date.jittered, ans.pts$fork.length.mm.jittered),]
#95, 108, 122, 151, 152, 155
#   Add quantile lines
xx <- as.numeric(x) # no longer a POSIXct
x.bs <- bs( xx, df=6 )
# jason add.  this can sometimes be singular, apparently.  leads to problems in finding an inverse.
rq.fit <- tryCatch(rq( y ~ x.bs, tau=c(0.05, 0.95) ), error = function(e) e)
xpred <- seq(quantile(xx,.01),quantile(xx,.99),length=200)
xp.bs <- bs( xpred, knots=attr(x.bs,"knots"), Boundary.knots=attr(x.bs,"Boundary.knots") )
if(rq.fit[1] == 'Singular design matrix'){
class(xpred) <- class(x)  # back to a POSIXct for output
#     ans.qr <- data.frame( date=xpred, q.05=ypred[,1], q.95=ypred[,2] )
} else {
ypred <- cbind(1,xp.bs)%*%coef(rq.fit)
lines( xpred, ypred[,1], col="black", lwd=3, lty=2 )
lines( xpred, ypred[,2], col="black", lwd=3, lty=2 )
class(xpred) <- class(x)  # back to a POSIXct for output
ans.qr <- data.frame( date=xpred, q.05=ypred[,1], q.95=ypred[,2] )
}
#   Main title
title( main=attr(catch.df, "site.name"), line=2, cex.main=2 )
sp.string <- attr(catch.df, "species.name")
if( !is.na(attr(catch.df, "runID")) ){
sp.string <- paste( sp.string, ", ", attr(catch.df, "run.name"), " run", sep="")
}
dts <- attr(catch.df, "run.season")
dts <- paste( format(dts$start, "%d%b%Y"), "to", format(dts$end, "%d%b%Y") )
sp.string <- paste( sp.string, ", ", dts, sep="")
title( main=sp.string, line=1, cex.main=1 )
#   Legend
if(rq.fit[1] == 'Singular design matrix'){
myleg <- as.character(CAMP.life.stage$lifeStageCAMP[ CAMP.life.stage$lifeStageCAMP %in% life.stages ])
#print(myleg)
legend( "topleft", legend=myleg, col=c(mycol,"black"), pch=c(mypch,NA), lty=c(rep(NA,length(mycol))), lwd=c(rep(NA,length(mycol))) )
} else {
myleg <- as.character(CAMP.life.stage$lifeStageCAMP[ CAMP.life.stage$lifeStageCAMP %in% life.stages ])
#print(myleg)
myleg <- c(myleg, "90% bounds")
legend( "topleft", legend=myleg, col=c(mycol,"black"), pch=c(mypch,NA), lty=c(rep(NA,length(mycol)), 2), lwd=c(rep(NA,length(mycol)), 3) )
}
#   ---- Close the graphics file
dev.off()
search()
#   ---- Write out the csv's
out.pts <- paste(output.file, "_size_by_date_points.csv", sep="")
write.table( ans.pts, file=out.pts, sep=",", row.names=FALSE)
if(rq.fit[1] != 'Singular design matrix'){
out.qr <- paste(output.file, "_size_by_date_quantlines.csv", sep="")
write.table( ans.qr, file=out.qr, sep=",", row.names=FALSE)
}
#   ---- Send messages back to the interface
cat("SUCCESS - F.size.by.date\n\n")
cat(paste("Working directory:", getwd(), "\n"))
cat(paste("R data frames saved in file:", "<no RData saved>", "\n\n"))
cat("Number of files created in working directory = 3\n")
cat(paste(out.graphs, "\n"))
cat(paste(out.pts, "\n"))
if(rq.fit[1] != 'Singular design matrix'){
cat(paste(out.qr, "\n"))
}
cat("\n")
invisible(catch.df)
output.file
nrow(catch.df)
library(RODBC)
testing <- TRUE                   # points to different output folders.
platform <- 'CAMP_RST20151130'    # points to different platforms
paste(cat('testing == TRUE\n'))
setwd(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/"))
source(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/source_all_testing.R"))
theExcel <- read.csv('theExcel.csv')
theExcel <- theExcel[theExcel$Issues == '',]
rownames(theExcel) <- NULL
testi
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
#   for(byj in 1:4){
#
#     if(byj == 1){
#       by <- 'day'
#     } else if(byj == 2){
#       by <- 'week'
#     } else if(byj == 3){
#       by <- 'month'
#     } else if(byj == 4){
#       by <- 'year'
#     }
#
#     F.passage       ( site, taxon, run, min.date, max.date, by,        output.file,                ci                      )
#   }
#    F.run.passage     ( site, taxon,      min.date, max.date, by=by,     output.file=output.file,         ci=TRUE            )
#    F.lifestage.passage(site, taxon,      min.date, max.date,            output.file,                     ci=TRUE            )
# }
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
#F.release.summary ( site, taxon, run, min.date, max.date,            output.file                                         )
#F.weekly.effort   ( site, taxon,      min.date, max.date,            output.file                                         )
# specify the range, in terms of theExcel rownames, to test.
for(testi in 1:75){
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
#   for(byj in 1:4){
#
#     if(byj == 1){
#       by <- 'day'
#     } else if(byj == 2){
#       by <- 'week'
#     } else if(byj == 3){
#       by <- 'month'
#     } else if(byj == 4){
#       by <- 'year'
#     }
#
#     F.passage       ( site, taxon, run, min.date, max.date, by,        output.file,                ci                      )
#   }
#    F.run.passage     ( site, taxon,      min.date, max.date, by=by,     output.file=output.file,         ci=TRUE            )
#    F.lifestage.passage(site, taxon,      min.date, max.date,            output.file,                     ci=TRUE            )
# }
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
#F.release.summary ( site, taxon, run, min.date, max.date,            output.file                                         )
#F.weekly.effort   ( site, taxon,      min.date, max.date,            output.file                                         )
}
testi
theExcel
min.date
dev.off()
dev.off()
dev.off()
dev.off()
library(quantreg)
library(splines)
#   Open a graphics device
if( !is.na(output.file) ){
#   ---- Open PNG device
out.graphs <- paste(output.file, "_size_by_date.png", sep="")
if(file.exists(out.graphs)){
file.remove(out.graphs)
}
tryCatch({png(file=out.graphs,width=7,height=7,units="in",res=600)}, error=function(x){png(file=out.graphs)})
}
#   *******
#   Open ODBC channel and retrieve lifestage labels
ch <- odbcConnectAccess(db.file)
CAMP.life.stage <- sqlFetch(ch, table.names["CAMP.life.stages"])
rst.life.stage <- sqlFetch(ch, table.names["life.stages"])
close(ch)
#   ********
#   Retrieve basic data set, one line per fish or group of fish of same length.
catch.df   <- F.get.indiv.fish.data( site, taxon, run, min.date, max.date, keep="unmarked" )
#  grab non-valid Catch
attributesSafe <- attributes(catch.df)
db <- get( "db.file", env=.GlobalEnv )
ch <- odbcConnectAccess(db)
F.run.sqlFile( ch, "QryNonValidFishing.sql", R.TAXON=taxon )
nvCatch <- sqlFetch( ch, "TempSumUnmarkedByTrap_Run_X_final" )        #   Now, fetch the result -- nvCatch = non-Valid Catch
F.sql.error.check(nvCatch)
close(ch)
dim(catch.df)
dim(nvCatch.df)
nvCatch <- nvCatch[ (nvCatch$Unmarked > 0), ]                         #  Subset the catches to just positives.  Toss the 0 catches.
if(nrow(nvCatch) > 0){
nvCatch$Unassd <- nvCatch$lifeStage                                   #  jason add to ID the unassigned lifeStage -- necessary to separate measured vs caught.
nvCatch2 <- F.expand.plus.counts( nvCatch )                           #  Expand the Plus counts
nvCatch2$includeCatchID <- 2                                          #  make this df match the catch.df
nvCatch3 <- F.assign.batch.date( nvCatch2 )                           #  clean up dates
nvCatch.df <- nvCatch3[,names(catch.df)]                              #  get both dfs lined up correctly
if(nrow(catch.df) > 0 & nrow(nvCatch.df) > 0){
catch.df <- rbind(catch.df,nvCatch.df)                                #  use a new catch.df with non-valid fishing included
attributes(catch.df) <- attributesSafe
} else if(nrow(catch.df) == 0 & nrow(nvCatch.df) > 0){
catch.df <- nvCatch.df
# no attributes to bring in -- do it now
attr(catch.df, "siteID" ) <- site
attr(catch.df, "site.name") <- catch.df$siteName[1]
attr(catch.df, "subsites") <- unique(catch.df$trapPositionID)
} else if(nrow(catch.df) > 0 & nrow(nvCatch.df) == 0){
catch.df <- catch.df
attributes(catch.df) <- attributesSafe
} # nrow(catch.df) == 0 condition below will catch situation when no records ever found.
}
dim(nvCatch)
F.sql.error.check(nvCatch)
nvCatch <- sqlFetch( ch, "TempSumUnmarkedByTrap_Run_X_final" )        #   Now, fetch the result -- nvCatch = non-Valid Catch
F.sql.error.check(nvCatch)
#  grab non-valid Catch
attributesSafe <- attributes(catch.df)
db <- get( "db.file", env=.GlobalEnv )
ch <- odbcConnectAccess(db)
F.run.sqlFile( ch, "QryNonValidFishing.sql", R.TAXON=taxon )
nvCatch <- sqlFetch( ch, "TempSumUnmarkedByTrap_Run_X_final" )        #   Now, fetch the result -- nvCatch = non-Valid Catch
F.sql.error.check(nvCatch)
close(ch)
dim(nvCatch)
nvCatch <- nvCatch[ (nvCatch$Unmarked > 0), ]
dim(nvCatch)
testi
nvCatch$Unassd <- nvCatch$lifeStage                                   #  jason add to ID the unassigned lifeStage -- necessary to separate measured vs caught.
nvCatch2 <- F.expand.plus.counts( nvCatch )                           #  Expand the Plus counts
nvCatch2$includeCatchID <- 2
nvCatch3 <- F.assign.batch.date( nvCatch2 )
dim(nvCatch2)
head(nvCatch2)
nvCatch2$SampleDate
df <- nvCatch2
cuttime <- get( "samplePeriodCutTime", env=.GlobalEnv )
midtime <- "00:00:00"   # this is the time of day assigned to batchDates.  Could be half way between cut times or (cuttime - 12*60*60).
time.zone <- get( "time.zone", env=.GlobalEnv )
#   A sequence of dates at cuttime every day
min.day <- min(df$EndTime) - 24*60*60
max.day <- max(df$EndTime) + 2*24*60*60
cut.seq <- seq( min.day, max.day, by=24*60*60 )
cut.day <- format( cut.seq, "%Y-%m-%d" )
cut.seq <- as.POSIXct( paste( cut.day, cuttime ), format="%Y-%m-%d %H:%M:%S", tz=time.zone)
#   Bin the sampleEnd's to cut.seq
ind <- cut( df$EndTime, cut.seq, labels=FALSE )
#   Establish when the cut time "wraps" to the next day.  I.e., at some point, as cut time increases from 0, you
#   stop calling the sample from the night before, and attribute it to the current night.  This time is set in
#   wrap.POSIX.
cut.POSIX <- as.POSIXct( paste("1970-1-1", cuttime, format="%Y-%m-%d %H:%M:%S" ))
wrap.POSIX <- as.POSIXct("1970-1-1 06:00:00", format="%Y-%m-%d %H:%M:%S" )
nvCatch2$EndTime
cut.seq
help(cut)
cut.seq
duplicated(cut.seq)
cut.day
min.day
max.day
help(format)
min.day
max.day
cut.seq
min.day
class(min.day)
min.day <- as.POSIXct( min(df$EndTime) - 24*60*60, format="%Y-%m-%d %H:%M:%S", tz=time.zone)
min.day
time.zone
min(df$EndTime)
cut.day
cuttime
help("as.POSIXct"\)
help("as.POSIXct")
min.day <- as.POSIXlt( min(df$EndTime) - 24*60*60, format="%Y-%m-%d %H:%M:%S", tz=time.zone)
min.day
max.day <- as.POSIXlt( max(df$EndTime) + 2*24*60*60, format="%Y-%m-%d %H:%M:%S", tz=time.zone)
max.day
cut.seq <- seq( min.day, max.day, by=24*60*60 )
cut.day <- format( cut.seq, "%Y-%m-%d" )
cut.seq <- as.POSIXct( paste( cut.day, cuttime ), format="%Y-%m-%d %H:%M:%S", tz=time.zone)
cut.seq
duplicated(cut.seq)
library(RODBC)
testing <- TRUE                   # points to different output folders.
platform <- 'CAMP_RST20151130'    # points to different platforms
paste(cat('testing == TRUE\n'))
setwd(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/"))
source(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/source_all_testing.R"))
theExcel <- read.csv('theExcel.csv')
theExcel <- theExcel[theExcel$Issues == '',]
rownames(theExcel) <- NULL
testi <- 38
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
#   for(byj in 1:4){
#
#     if(byj == 1){
#       by <- 'day'
#     } else if(byj == 2){
#       by <- 'week'
#     } else if(byj == 3){
#       by <- 'month'
#     } else if(byj == 4){
#       by <- 'year'
#     }
#
#     F.passage       ( site, taxon, run, min.date, max.date, by,        output.file,                ci                      )
#   }
#    F.run.passage     ( site, taxon,      min.date, max.date, by=by,     output.file=output.file,         ci=TRUE            )
#    F.lifestage.passage(site, taxon,      min.date, max.date,            output.file,                     ci=TRUE            )
# }
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
head(catch.df)
table(catch.df$RandomSelection)
theExcel[38,]
head(catch.dfl)
head(catch.df)
#   A sequence of dates at cuttime every day
min.day <- min(df$EndTime) - 24*60*60
max.day <- max(df$EndTime) + 2*24*60*60
cut.seq <- seq( min.day, max.day, by=24*60*60 )
cut.day <- format( cut.seq, "%Y-%m-%d" )
cut.seq <- as.POSIXct( paste( cut.day, cuttime ), format="%Y-%m-%d %H:%M:%S", tz=time.zone)
#   Bin the sampleEnd's to cut.seq
ind <- cut( df$EndTime, cut.seq, labels=FALSE )
cut.day
library(RODBC)
testing <- TRUE                   # points to different output folders.
platform <- 'CAMP_RST20151130'    # points to different platforms
paste(cat('testing == TRUE\n'))
setwd(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/"))
source(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/source_all_testing.R"))
theExcel <- read.csv('theExcel.csv')
theExcel <- theExcel[theExcel$Issues == '',]
rownames(theExcel) <- NULL
# specify the range, in terms of theExcel rownames, to test.
for(testi in 1:75){
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
#   for(byj in 1:4){
#
#     if(byj == 1){
#       by <- 'day'
#     } else if(byj == 2){
#       by <- 'week'
#     } else if(byj == 3){
#       by <- 'month'
#     } else if(byj == 4){
#       by <- 'year'
#     }
#
#     F.passage       ( site, taxon, run, min.date, max.date, by,        output.file,                ci                      )
#   }
#    F.run.passage     ( site, taxon,      min.date, max.date, by=by,     output.file=output.file,         ci=TRUE            )
#    F.lifestage.passage(site, taxon,      min.date, max.date,            output.file,                     ci=TRUE            )
# }
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
#F.release.summary ( site, taxon, run, min.date, max.date,            output.file                                         )
#F.weekly.effort   ( site, taxon,      min.date, max.date,            output.file                                         )
}
testi
theExcel
dev.off()
dev.off()
dev.off()
dev.off()
close(ch)

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_catch_data.r
\name{F.get.catch.data}
\alias{F.get.catch.data}
\title{F.get.catch.data - Retrieve data frame with catch information}
\usage{
F.get.catch.data(site, taxon, min.date, max.date, autoLS = FALSE,
  nLS = NULL, weightUse = NULL, reclassifyFL = FALSE)
}
\arguments{
\item{site}{The identification number of the site for which estimates are
required.}

\item{taxon}{The species identifier indicating the type of fish of interest. 
This is always \code{161980}; i.e., Chinook Salmon.}

\item{min.date}{The start date for data to include. This is a text string in 
the format \code{\%Y-\%m-\%d}, or \code{YYYY-MM-DD}.}

\item{max.date}{The end date for data to include.  Same format as 
\code{min.date}.}

\item{autoLS}{A logical indicating whether or not lifestage assignment should
be decided by the computer via a mixture distribution/clustering analysis.}

\item{nLS}{A numeric communicating the number of new lifestages to assign. 
Values can be \code{2} or \code{3}.}

\item{weightUse}{A logical indicating if weight data are to be incorporated 
in the assigning of lifestage.  \code{useWeight = NULL}, ignored if 
\code{autoLS} is \code{FALSE}, \code{NULL} leads to the program deciding if
weight should be used, \code{FALSE} lead to the program not using weight to
assign lifestage.}

\item{reclassifyFL}{A logical indicating if passage should be estimated via 
forklength-based class groups.}
}
\value{
A data frame summarizing catch for the site of interest for all traps
  between the dates indicated.  Data include biologist- or computer-assigned 
  \code{lifeStage}, \code{FinalRun}, and \code{forkLength}.
}
\description{
Fetch catch data from an Access database. Do some initial computations, like
dates.
}
\details{
Function \code{F.get.catch.data} fetches all appropriate catch data 
  from an Access database, and then processes it for further use.  The 
  processing includes several steps. Currently, although variable 
  \code{includeCatchID} is separately queried, it is not used in processing 
  after the initial catch query.
  
  Each record contained in the resulting data frame itemizes fork length,
  lifestage, and final run, via variables \code{forkLength},
  \code{lifeStage}, and \code{FinalRun}, respectively, for each unique combination of 
  \code{trapVisitID} and \code{trapPositionID}.
  
  Counts of captured fish are recorded via variable \code{Unmarked}, with
  zero catch containing a \code{0}.  Zero records additionally have variables
  \code{lifeStage} and \code{FinalRun} equal to \code{Unassigned}.
}
\section{Lifestage}{
 
Users have the options of reassigning lifestage away from 
  the assignments provided by field biologists at the time of capture.
  Options for reassignment number several, and are detailed (here?).
}

\section{Gaps in Fishing}{
  
Sometimes, during the normal course of fishing, a 
  trap, or \code{trapPositionID}, stops fishing for an extended period of 
  time in the middle of the time frame specified by \code{min.date} and 
  \code{max.date}.  During this so-called "gap in fishing," subsequent catch 
  fitting methodologies have no data via which to estimate catch fit. Thus, 
  unexpected behavior may occur, especially if catch was trending 
  upwards/downwards immediately before/after a gap in fishing.  To prevent 
  statistical methodologies from estimating catch during these periods, catch
  imputation procedures are "turned off" by reassigning the 
  \code{trapPositionID} of the offending trap after the gap to a different 
  \code{trapPositionID}.  In this way, catch is independently estimated for 
  each disconnected trapping period, with no estimation occurring during the 
  gap.  Gaps must be greater than or equal to the value set by global 
  variable \code{fishingGapMinutes} for reassignment to occur, which is 
  currently set at 7 days (or 10,080 minutes).
  
  Any one trap, given a \code{min.date} and \code{max.date}, may have more
  than one gap in fishing.  Generally, the number of resulting reassigned 
  \code{trapPositionID}s equals one more than the number of gaps. Reassigned 
  traps can be identified by a decimal appendage after the original 
  \code{trapPositionID}, although the first trapping instance, i.e., before
  the first (and possibly only) gap in fishing, retains its original
  non-decimal \code{trapPositionID}.
}

\section{Half-cone Adjustment}{
  
On some rivers, the use of half-cone 
  adjustments is commonplace.  Practically, the use of a half-cone involves 
  covering half of a trap opening, so as to reduce the amount of water that 
  flows into it.  This also necessarily reduces the amount of captured fish 
  as well. In order to accurately estimate temporal catch trends, statistical
  methodologies need to account for this expected reduction.  However, a 
  season could include trapping instances involving both full-cone and 
  half-cone operations.  To account for this possibility, trapping instances 
  utilizing half-cones via variable \code{halfConeID} have their catch 
  multiplied by the value of the global variable \code{halfConeMulti}, which 
  is currently set at 2.
  
  Within the process of estimating passage, original catch is paritioned into
  many different groupings.  This eases calculations and provides a 
  check;  see "Fish Accounting" in functon \code{F.est.passage}.  Generally,
  variables check for appropriate tallying of added half-cone fish for each
  of assigned and unassigned catch.  A break-out for tallying counts of fish between assigned and 
  unassigned catch is necessary due to plus-counting.  
  
  The check for assigned fish sums the counts of assigned fish and the added
  count of half-cone fish, following plus-counting.  Practically, variable
  \code{halfConeAssignedCatch} is summed with variable \code{assignedCatch}
  to form variable \code{modAssignedCatch}, with all three variables
  containing integer counts of fish.  The plus-count algorithm applies
  proportions of observed fish to unassigned fish, often resulting in 
  fractional fish.  Due to rounding, this means that sometimes, the numbers
  of half-cone fish does not exactly equal the number of assigned fish.  See
  \code{F.assign.1dim}.
  
  A similar calculation sums variables \code{halfConeUnassignedCatch} and
  \code{unassignedCatch} of integer fish to create variable
  \code{modUnassignedCatch}.
}

\section{Half-cone Operations \& Plus Counts}{
  
Generally, during a trapping
  instance, a small sample is selected from what may be many thousands of
  fish.  The resulting sampling distribution, in terms of lifestage and run,
  is then applied to the remaining fish not randomly sampled.  The resulting
  assigned proportions of unsampled fish form "plus counts."  Functions 
  \code{expand.plus.counts}, \code{assign.1dim}, and \code{assign.2dim} 
  detail the plus-count algorithm.  Plus-counting requires special 
  consideration in light of half-cone adjustments.
  
  Generally, the estimation of plus counts requires a sample.  Thus, prior to
  its implementation, any half-cone adjustments must already be applied. 
  However, the plus-count algorithm often considers the sampling distribution
  of fish from trapping instances temporally neighboring that of the trapping
  instance of interest.  Inevitably, a before and/or after trapping instance 
  may have been a full-cone operation, in contrast to the half-cone operation
  of the trapping instance of focus, or vice versa.  Thus, resulting 
  sampling distributions can become skewed, i.e., the amount by which a
  half-cone trapping instance must have its fish counts expanded is not
  necessarily an exact multiple of 2.
  
  To combat this phenonmenon, trapping instances with half-cone operations
  are not simply multiplied by the value of the global variable 
  \code{halfConeMulti}.  Instead, the plus-count routine is applied twice,
  both with and without the \code{halfConeMulti} adjustment applied.  Then,
  for each trapping instance, the difference in the count of fish is then
  recorded as the "half-cone adjustment" for that particular lifestage, final
  run, and forklength combination.  In this way, half-cone adjustments are obtained,
  while taking into consideration the possibility that in some instances,
  simple application of the \code{halfConeMulti} variables is not advised.
}

\section{Not Fishing}{
  
Similar to "gaps in fishing" are periods of "Not 
  fishing."  An instance of Not fishing is a period during which a trap does 
  not operate for more than 30 minutes, but less than 7 days.  Instances of 
  Not fishing are included as records within the data frame returned by 
  function \code{F.get.catch.data}, and can be identified by variable
  \code{TrapStatus}, which is set equal to \code{Not fishing}.  Equivalently,
  variable \code{trapVisitID} is missing.  (does connie add in sampling less than 30 minutes to a trapping period of good fishing?)
}
\examples{
 
\dontrun{

# we would need to query.  what do we want to do?
}
}
\seealso{
\code{getCatchDataWeight.R}, \code{expand.plus.counts}, \code{assign.1dim}, and \code{assign.2dim} these also: \code{assignLifeStage.R},
  \code{assignLSCompare.R}?
}


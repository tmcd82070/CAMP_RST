sp.string <- paste( sp.string, ", ", dts, sep="")
title( main=sp.string, line=1, cex.main=1 )
title( main=disc, line=0, cex.main=0.75)
title( main=disc, line=0.25, cex.main=0.5)
title( main=disc, line=0.25, cex.main=0.75)
title( main=disc, line=0.25, cex.main=0.70)
dev.off()
x <- catch.df$EndTime
y <- catch.df$forkLength
lstage <- catch.df$lifeStage
n <- catch.df$Unmarked
valid <- catch.df$includeCatchID
drop <- is.na(x) | is.na(y) | is.na(lstage) | is.na(n)
if( (length(taxon) == 1) & (taxon == 161980) ){
drop <- drop | !(lstage %in% c('Fry','Parr','Smolt'))
}
x <- x[!drop]
y <- y[!drop]
lstage <- lstage[!drop]
n <- n[!drop]
valid <- valid[!drop]
x <- rep(x, n)
y <- rep(y, n)
lstage <- rep(lstage, n)
valid <- rep(valid, n)
plot( x, y, type="n", xlab="", ylab="", xaxt="n" )
title( xlab="Date", cex.lab=1.5)
title( ylab="Fork Length (mm)", cex.lab=1.5, line=2.5 )
dts <- pretty(x)
axis( side=1, at=dts, labels=format(dts, "%d%b%y") )
life.stages <- sort(unique( lstage ))
cat(paste("Lifestages plotted:", paste(life.stages, collapse=", "), "\n"))
if( length(life.stages) == 3 ){
mycol <- c("red", "orange", "blue")
} else {
mycol <- rainbow( length(life.stages) )
}
mypch <- rev(1:(0+length(life.stages)))
ans.pts <- NULL
for( l.s in life.stages ){
ind <- l.s == lstage
xx <- x[ind]
yy <- y[ind]
jitx <- rnorm(sum(ind), sd=60*60*3)
jity <- 0
validv <- ifelse(valid[ind]==1,'Fishing','NotFishing')
points( xx + jitx, yy + jity, col=mycol[ which(l.s == life.stages)], pch=mypch[ which(l.s == life.stages)] )
ans.pts <- rbind( ans.pts, data.frame(lifestage=l.s, date=xx, fork.length.mm=yy, date.jittered=xx+jitx, fork.length.mm.jittered=yy+jity, fishing.status=validv ))
}
ans.pts <- ans.pts[order(ans.pts$date, ans.pts$lifestage, ans.pts$date.jittered, ans.pts$fork.length.mm.jittered),]
xx <- as.numeric(x) # no longer a POSIXct
x.bs <- bs( xx, df=6 )
rq.fit <- tryCatch(rq( y ~ x.bs, tau=c(0.05, 0.95) ), error = function(e) e)
xpred <- seq(quantile(xx,.01),quantile(xx,.99),length=200)
xp.bs <- bs( xpred, knots=attr(x.bs,"knots"), Boundary.knots=attr(x.bs,"Boundary.knots") )
if(rq.fit[1] == 'Singular design matrix'){
class(xpred) <- class(x)  # back to a POSIXct for output
} else {
ypred <- cbind(1,xp.bs)%*%coef(rq.fit)
lines( xpred, ypred[,1], col="black", lwd=3, lty=2 )
lines( xpred, ypred[,2], col="black", lwd=3, lty=2 )
class(xpred) <- class(x)  # back to a POSIXct for output
ans.qr <- data.frame( date=xpred, q.05=ypred[,1], q.95=ypred[,2] )
}
title( main=attr(catch.df, "site.name"), line=2, cex.main=2 )
sp.string <- attr(catch.df, "species.name")
if( !is.na(attr(catch.df, "runID")) ){
sp.string <- paste( sp.string, ", ", attr(catch.df, "run.name"), " run", sep="")
}
dts <- attr(catch.df, "run.season")
dts <- paste( format(dts$start, "%d%b%Y"), "to", format(dts$end, "%d%b%Y") )
sp.string <- paste( sp.string, ", ", dts, sep="")
title( main=sp.string, line=1, cex.main=1 )
title( main=disc, line=0.25, cex.main=0.70)
library(RODBC)
testing <- TRUE                   # points to different output folders.
platform <- 'CAMP_RST20151130'    # points to different platforms
paste(cat('testing == TRUE\n'))
setwd(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/"))
source(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/",platform,"/R-Interface/source_all_testing.R"))
theExcel <- read.csv('theExcel.csv')
theExcel <- theExcel[theExcel$Issues == '',]
rownames(theExcel) <- NULL
testi <- 1
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
F.length.frequency <- function( site, taxon, run, min.date, max.date, output.file, by.lifestage ){
if( !is.na(output.file) ){
out.graphs <- paste(output.file, "_len_freq.png", sep="")
if(file.exists(out.graphs)){
file.remove(out.graphs)
}
tryCatch({png(file=out.graphs,width=7,height=7,units="in",res=600)}, error=function(x){png(file=out.graphs)})
}
if( by.lifestage ){
ch <- odbcConnectAccess(db.file)
CAMP.life.stage <- sqlFetch(ch, table.names["CAMP.life.stages"])
rst.life.stage <- sqlFetch(ch, table.names["life.stages"])
close(ch)
}
catch.df   <- F.get.indiv.fish.data( site, taxon, run, min.date, max.date, keep="unmarked" )
attributesSafe <- attributes(catch.df)
db <- get( "db.file", env=.GlobalEnv )
ch <- odbcConnectAccess(db)
F.run.sqlFile( ch, "QryNonValidFishing.sql", R.TAXON=taxon )
nvCatch <- sqlFetch( ch, "TempSumUnmarkedByTrap_Run_X_final" )        #   Now, fetch the result -- nvCatch = non-Valid Catch
F.sql.error.check(nvCatch)
close(ch)
nvCatch <- nvCatch[ (nvCatch$Unmarked > 0), ]                         #  Subset the catches to just positives.  Toss the 0 catches.
if(nrow(nvCatch) > 0){
nvCatch$Unassd <- nvCatch$lifeStage                                   #  jason add to ID the unassigned lifeStage -- necessary to separate measured vs caught.
nvCatch2 <- F.expand.plus.counts( nvCatch )                           #  Expand the Plus counts
nvCatch2$includeCatchID <- 2                                          #  make this df match the catch.df
nvCatch3 <- F.assign.batch.date( nvCatch2 )                           #  clean up dates
nvCatch.df <- nvCatch3[,names(catch.df)]                              #  get both dfs lined up correctly
if(nrow(catch.df) > 0 & nrow(nvCatch.df) > 0){
catch.df <- rbind(catch.df,nvCatch.df)                                #  use a new catch.df with non-valid fishing included
attributes(catch.df) <- attributesSafe
disc <- 'Fork lengths include both valid and invalid trapping data.'
} else if(nrow(catch.df) == 0 & nrow(nvCatch.df) > 0){
catch.df <- nvCatch.df
attr(catch.df, "siteID" ) <- site
attr(catch.df, "site.name") <- catch.df$siteName[1]
attr(catch.df, "subsites") <- unique(catch.df$trapPositionID)
disc <- 'Fork lengths include only invalid trapping data;  no valid data exists for selected criteria.'
} else if(nrow(catch.df) > 0 & nrow(nvCatch.df) == 0){
catch.df <- catch.df
attributes(catch.df) <- attributesSafe
disc <- 'Fork lengths include only valid trapping data;  no invalid data exists for selected criteria.'
} # nrow(catch.df) == 0 condition below will catch situation when no records ever found.
}
if(nrow(catch.df) == 0){
plot( c(0,1), c(0,1), xaxt="n", yaxt="n", type="n", xlab="", ylab="")
text( .5,.5, "All Zero's\nCheck dates\nCheck that finalRunID is assigned to >=1 fish per visit\nCheck sub-Site were operating between dates")
dev.off(dev.cur())
ans <- out.graphs
cat("FAILURE - F.length.frequency\n\n")
cat(paste("Working directory:", getwd(), "\n"))
cat(paste("R data frames saved in file:", "<no RData saved>", "\n\n"))
cat("Number of files created in working directory = 1\n")
cat(paste(out.graphs, "\n"))
cat("\n")
return(catch.df)
}
if(class(catch.df$lifeStage) == 'factor'){catch.df$lifeStage <- as.character(droplevels(catch.df$lifeStage))}   # jason add
y <- catch.df$forkLength
n <- catch.df$Unmarked  #catch.df$n
if( by.lifestage ){
lstage <- catch.df$lifeStage
} else {
lstage <- rep(0, length(y))
}
drop <-  is.na(y) | is.na(lstage) | is.na(n)
if( (length(taxon) == 1) & (taxon == 161980) & by.lifestage == TRUE ){   # jason add the by.lifetage condition.  only evaluate if lstage setup to vary
drop <- drop | !(lstage %in% c('Fry','Parr','Smolt'))
}
y <- y[!drop]
lstage <- lstage[!drop]
n <- n[!drop]
y <- rep(y, n)
lstage <- rep(lstage, n)
f.breaks<-function(x, near=10, width=2){
lolim <- trunc( min(x)/near ) * near   # rounds down to nearest 'near' number, eg., near = 5, rounds down to nearest multiple of 5
hilim <- ceiling( max(x)/near ) * near # rounds up to nearest 'near' number.
bks <- seq(lolim, hilim, by=width)
bks
}
f.max.bar.hgt <- function(x, bks){
h <- hist(x, breaks=bks, plot=F )
max(h$counts)
}
f.len.freq<-function(x, bks, col, last=F, max.y, stage){
if(last) {
xa <- "s"
xl <- "Forklength (mm)"
} else {
xa <- "n"
xl <- ""
}
h <- hist(x, breaks=bks, plot=F )  # get counts so can set ylim correctly
y.at <- pretty(h$counts)
h <- hist(x, breaks=bks, freq=T, xlab=xl, ylab="", main="", ylim=range(y.at),
density=-1, col=col, cex.lab=2, cex.axis=1.25, yaxt="n", xlim=range(bks), xaxt="n" )
if(last){     # last lifestage, so plot x-axis.
if((length(bks) %% 2) == 1){
bksL <- bks[c(TRUE,FALSE)]   # odd ticks
} else {
bksL <- c(bks[c(TRUE,FALSE)],bks[length(bks)])  # even ticks
}
axis( 1, at=bksL, labels=formatC(bksL, big.mark=","),cex.axis=0.85)
}
axis( 2, at=y.at, labels=formatC(y.at, big.mark=",") )
n.str <- paste( "n (un-inflated)=", formatC(sum(h$counts), big.mark=",") )
top <- legend( "topright", legend=c(stage,n.str), plot=F, cex=2  )
text( max(bks), top$text$y[1], stage, cex=2, col=col, adj=1 )
text( max(bks), top$text$y[2], n.str, cex=1, col="black", adj=1 )
h
}
main.l1 <- attr(catch.df, "site.name")
main.l2 <- attr(catch.df, "species.name")
if( !is.na(attr(catch.df, "runID")) ){
main.l2 <- paste( main.l2, ", ", attr(catch.df, "run.name"), " run", sep="")
}
dts <- attr(catch.df, "run.season")
dts <- paste( format(dts$start, "%d%b%Y"), "to", format(dts$end, "%d%b%Y") )
main.l2 <- paste( main.l2, ", ", dts, sep="")
if( by.lifestage ){
life.stages <- sort(unique( lstage ))
if( length(life.stages) == 3 ){
mycol <- c("red", "orange", "blue")
} else {
mycol <- rainbow( length(life.stages) )
}
nl <- length(life.stages)
layout.mat <- rbind( c(nl+2,nl+2),
cbind( nl+1, 1:nl ))
layout.widths <- c(.075,.925)
layout.heights<- c(nl*.1, rep(1,nl-1), 1+nl*.1)
layout( layout.mat, widths=layout.widths, heights=layout.heights )
bks <- f.breaks( y, 10, 2 )
max.y <- 0
for( i in 1:nl ){
ind <- life.stages[i] == lstage
yy <- y[ind]
max.y <- max( max.y, f.max.bar.hgt(yy, bks))
}
for( i in 1:nl ){
ind <- life.stages[i] == lstage
yy <- y[ind]
stage.name <- CAMP.life.stage$lifeStageCAMP[ CAMP.life.stage$lifeStageCAMP == life.stages[i] ]
if( i == nl ){
par(mar=c(5.1,2.1,.5,2.1))
} else {
par(mar=c(0,2.1,.5,2.1))
}
cnts <- f.len.freq(yy, bks, mycol[ i ], i == nl, max.y, stage.name)
if( i == 1 ){
ans <- data.frame( bin.mid.mm=cnts$mids, cnt=cnts$counts )
} else {
ans <- cbind( ans, cnt = cnts$counts )
}
names(ans)[ names(ans) == "cnt" ] <- paste0(casefold(stage.name), ".frequency")
}
par(mar=c(0,0,0,0))
plot(c(0,1), c(0,1), type="n", axes=F )
text( .5, .5, "Frequency", adj=.5, srt=90, cex=2 )
str.hgt <- strheight(main.l1, units="user", cex=2)  * 1.2 / .1
plot(c(0,1), c(0,1), type="n", axes=F )
text( .5, 1 - str.hgt    ,  main.l1, adj=.5, cex=2 )
text( .5, 1 - 2.1*str.hgt,  main.l2, adj=.5, cex=1.5 )
text( .5, 1 - 2.9*str.hgt,     disc, adj=.5, cex=1.0)
} else {
bks <- f.breaks( y, 10, 2 )
cnts <- f.len.freq(y, bks, "orange", last=TRUE, max.y=f.max.bar.hgt(y, bks), stage="")
title( main=main.l1, line=3, cex.main=1.5)
title( main=main.l2, line=2, cex.main=1 )
title( main=disc   , line=1, cex.main=0.5)
title( main="All life stages", line=0, cex.main=.85)
title( ylab = "Frequency", cex.lab=2, line=2.5 )
ans <- data.frame( bin.mid.mm=cnts$mids, frequency=cnts$counts )
}
dev.off()
out.csv <- paste(output.file, "_len_freq.csv", sep="")
write.table( ans, file=out.csv, sep=",", row.names=F )
cat("SUCCESS - F.length.frequency\n\n")
cat(paste("Working directory:", getwd(), "\n"))
cat(paste("R data frames saved in file:", "<no RData saved>", "\n\n"))
cat("Number of files created in working directory = 2\n")
cat(paste(out.graphs, "\n"))
cat(paste(out.csv, "\n"))
cat("\n")
invisible(catch.df)
}
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
for(testi in 1:75){
by <- 'All'
river <- as.character(droplevels(theExcel[testi,]$streamName))
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
} else if(river == 'Mokelumne River'){
db.file <- db.file8
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- as.character(droplevels(theExcel[testi,]$Site))
run          <- theExcel[testi,]$RunID
runText      <- as.character(droplevels(theExcel[testi,]$SalmonRun))
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 4
runText      <- 'Winter'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
}
taxon        <- 161980
output.file  <- paste0("..//Outputs//",river,"//Run ",testi,"--",by,"_",river,"_",siteText,"_",min.date,"_",max.date)
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
F.size.by.date    ( site, taxon, run, min.date, max.date,            output.file                                         )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=F"),   by.lifestage=FALSE          )
F.length.frequency( site, taxon, run, min.date, max.date,     paste0(output.file,"_ls=T"),   by.lifestage=TRUE           )
}
testi
q('no')

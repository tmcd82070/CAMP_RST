% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lifestage_passage.r
\name{F.lifestage.passage}
\alias{F.lifestage.passage}
\title{F.lifestage.passage}
\usage{
F.lifestage.passage(site, taxon, min.date, max.date, output.file, ci = TRUE)
}
\arguments{
\item{site}{<describe argument>}

\item{taxon}{<describe argument>}

\item{min.date}{<describe argument>}

\item{max.date}{<describe argument>}

\item{output.file}{<describe argument>}

\item{ci=TRUE}{<describe argument>}
}
\value{
<describe return value>
}
\description{
ANNUAL PRODUCTION ESTIMATES BY LIFE STAGE AND RUN ? TABULAR SUMMARY
   A table of passage estimates, with lifestages down the rows, and runs across the columns.

   Input:
   site = site ID of the place we want, trap locaton
   taxon = taxon number (from luTaxon) to retrieve


   ********
   Check that times are less than 1 year apart
}
\details{
<other comments found in file>
   ---- Start a progress bar
   ---- Fetch efficiency data
   ---- Fetch the catch and visit data
   Debugging
    tmp.catch0 <<- catch.df
    tmp.visit0 <<- visit.df
    print( table(catch.df$TrapStatus))
   ---- Summarize catch data by trapVisitID X FinalRun X lifeStage. Upon return, catch.df has one line per combination of these variables
catch.df <- F.summarize.fish.visit( catch.df )       jason turns off 4/15/2015
                   - the only reason we do this again is to get a different n.tot.
   Debugging
    tmp.catch <<- catch.df
    print( table(catch.df$TrapStatus))
    cat("in lifestage_passage.r (hit return) ")
    readline()
   ---- Compute the unique runs we need to do
   ---- Compute the unique life stages we need to do
 only added to lifestage passage code.
   ---- Print the number of non-fishing periods
   ---- Extract the unique trap visits.  This will be used in merge to get 0's later
    ind <- !duplicated( catch.df$trapVisitID ) & !is.na(catch.df$trapVisitID)
    visit.df <- catch.df[ind, ]
    visit.df <- visit.df[, !(names(visit.df) %in% c("FinalRun", "lifeStage", "n.tot", "mean.fl", "sd.fl"))]
   ********
   Loop over runs
 jason puts together the catches based on total, unassigned, assigned.
 jason brings halfcone counts along for the ride 1/14/2016 -- only for run_passage, and not run lifestage?
theSumsBefore <<- accounting(catch.df,"byRun")
   ---- Loop over lifestages
   ---- Subset to just one life stage and run
   ---- If we caught this run and lifestage, compute passage estimate.
   ---- Merge in the visits to get zeros
   ---- Update the constant variables.  Missing n.tot when trap was fishing should be 0.
   ---- Add back in the missing trapVisitID rows.  These identify the gaps in fishing
catch.df.ls <- rbind( catch.df.ls, catch.df[ is.na(catch.df$trapVisitID), ] )
   ---- Update progress bar
   Debugging
                tmp.c <<- catch.df.ls
                tmp.r <<- release.df
   Debugging
                print(dim(visit.df))
                print(dim(catch.df.ls))
                print( table( tmp.c$FinalRun, useNA="always" ))
                print( table( tmp.c$lifeStage, useNA="always" ))
                print( table( tmp.c$trapVisitID, useNA="always" ))
                cat("in lifestage_passage (hit return) ")
                readline()
 jason add 2/25/2016 -- deal with traps with all zero fish.
 see if we have non-zero fish for a trap, given the lifestage and run.
   ---- Compute passage
   ---- Update progress bar
print(pass)
   ---- Save
    ans <<- ans
    ans <- get("ans")
   ---- compute percentages of each life stage
   ---- Write out the table
   We have more than one run
   ---- Append totals to bottom
 Produce pie or bar charts
 2/29/2016 -- F.plot.lifestages needs the LifeStage in the rowname.  i have a case where this doesn't happen, where we only
 have Parr (so one LifeStage).  I do not know why this hasn't popped up before...
fl <- F.plot.runs( df, output.file, plot.pies=F )
out.fn.roots <- c(out.fn.roots, fl)
   ---- Write out message
}
\examples{
<insert examples>

}
\author{
WEST Inc.
}
\seealso{
\code{\link{<related routine>}}, \code{\link{<related routine>}}
}

